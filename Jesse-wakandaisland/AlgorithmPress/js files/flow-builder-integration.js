/**
 * AlgorithmPress Flow Builder Integration
 * Deep integration between flow system and AlgorithmPress builder
 */

(function(window, document) {
    'use strict';

    // Ensure required systems are available
    if (!window.AlgorithmPressFlowBuilder) {
        console.error('AlgorithmPress Flow Builder required');
        return;
    }

    const FlowBuilder = window.AlgorithmPressFlowBuilder;

    // Flow Integration System
    FlowBuilder.Integration = {
        // Integration state
        state: {
            activeIntegrations: new Map(),
            codeGenerationQueue: [],
            executionContext: null,
            bridgeConnections: new Map()
        },

        // Initialize integration system
        initialize: function() {
            this.setupPHPWasmBridge();
            this.setupEditorIntegration();
            this.setupDockIntegration();
            this.setupCodeGeneration();
            this.registerFlowTemplates();
            
            console.log('Flow Builder Integration initialized');
        },

        // Setup PHP-WASM bridge for flow execution
        setupPHPWasmBridge: function() {
            // Create bridge between flows and PHP-WASM
            this.phpWasmBridge = {
                // Execute PHP code from flow
                executeCode: async function(code, variables = {}) {
                    try {
                        if (window.PHPWasm && window.PHPWasm.run) {
                            // Inject variables into PHP context
                            let phpCode = '<?php\n';
                            
                            // Add variables
                            Object.entries(variables).forEach(([key, value]) => {
                                const serializedValue = typeof value === 'string' ? 
                                    `"${value.replace(/"/g, '\\"')}"` : 
                                    JSON.stringify(value);
                                phpCode += `$${key} = ${serializedValue};\n`;
                            });
                            
                            phpCode += code;
                            
                            const result = await window.PHPWasm.run(phpCode);
                            return { success: true, output: result };
                        } else {
                            throw new Error('PHP-WASM not available');
                        }
                    } catch (error) {
                        return { success: false, error: error.message };
                    }
                },

                // Generate PHP project from flow
                generateProject: async function(flow) {
                    const projectStructure = {
                        'index.php': this.generateMainFile(flow),
                        'functions.php': this.generateFunctionsFile(flow),
                        'config.php': this.generateConfigFile(flow),
                        'templates/': this.generateTemplates(flow),
                        'assets/': this.generateAssets(flow)
                    };

                    return projectStructure;
                },

                generateMainFile: function(flow) {
                    return `<?php
require_once 'config.php';
require_once 'functions.php';

// Generated from flow: ${flow.name}
// Auto-generated by AlgorithmPress Flow Builder

${this.generateFlowLogic(flow)}

// Main execution
try {
    $result = executeFlow();
    echo json_encode($result);
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>`;
                },

                generateFunctionsFile: function(flow) {
                    const functions = this.extractFunctionsFromFlow(flow);
                    return `<?php
// Generated functions from flow: ${flow.name}

${functions.join('\n\n')}

function executeFlow() {
    // Main flow execution logic
    ${this.generateFlowExecutionCode(flow)}
}
?>`;
                },

                generateFlowLogic: function(flow) {
                    // Convert flow nodes to PHP logic
                    let phpCode = '';
                    
                    // Process each node and generate corresponding PHP
                    flow.nodes.forEach(node => {
                        phpCode += this.generateNodeCode(node);
                    });
                    
                    return phpCode;
                }
            };
        },

        // Setup editor integration
        setupEditorIntegration: function() {
            this.editorIntegration = {
                // Add flow controls to editor
                addFlowControls: function() {
                    const editorToolbar = document.querySelector('.editor-toolbar, .toolbar');
                    if (editorToolbar) {
                        const flowControls = document.createElement('div');
                        flowControls.className = 'flow-controls';
                        flowControls.innerHTML = `
                            <div class="btn-group">
                                <button class="btn btn-outline-primary btn-sm" id="open-flow-builder">
                                    <i class="fas fa-sitemap"></i> Flow Builder
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" id="generate-from-flow">
                                    <i class="fas fa-magic"></i> Generate Code
                                </button>
                                <button class="btn btn-outline-info btn-sm" id="flow-templates">
                                    <i class="fas fa-templates"></i> Templates
                                </button>
                            </div>
                        `;
                        
                        editorToolbar.appendChild(flowControls);
                        this.setupFlowControlEvents();
                    }
                },

                // Setup flow control events
                setupFlowControlEvents: function() {
                    document.getElementById('open-flow-builder')?.addEventListener('click', () => {
                        FlowBuilder.Integration.openFlowBuilder();
                    });

                    document.getElementById('generate-from-flow')?.addEventListener('click', () => {
                        FlowBuilder.Integration.showCodeGenerationDialog();
                    });

                    document.getElementById('flow-templates')?.addEventListener('click', () => {
                        FlowBuilder.Integration.showFlowTemplates();
                    });
                },

                // Inject generated code into editor
                injectCode: function(code, position = 'end') {
                    const editor = this.getCurrentEditor();
                    if (!editor) return false;

                    try {
                        if (position === 'end') {
                            const currentCode = this.getEditorContent(editor);
                            this.setEditorContent(editor, currentCode + '\n\n' + code);
                        } else if (position === 'replace') {
                            this.setEditorContent(editor, code);
                        } else if (position === 'beginning') {
                            const currentCode = this.getEditorContent(editor);
                            this.setEditorContent(editor, code + '\n\n' + currentCode);
                        }
                        return true;
                    } catch (error) {
                        console.error('Failed to inject code:', error);
                        return false;
                    }
                },

                getCurrentEditor: function() {
                    // Support multiple editor types
                    if (window.ace && window.ace.editor) {
                        return window.ace.editor;
                    } else if (window.monaco && window.monaco.editor) {
                        return window.monaco.editor.getModels()[0];
                    } else if (window.CodeMirror) {
                        return document.querySelector('.CodeMirror')?.CodeMirror;
                    }
                    return null;
                },

                getEditorContent: function(editor) {
                    if (editor.getValue) {
                        return editor.getValue();
                    } else if (editor.getContent) {
                        return editor.getContent();
                    }
                    return '';
                },

                setEditorContent: function(editor, content) {
                    if (editor.setValue) {
                        editor.setValue(content);
                    } else if (editor.setContent) {
                        editor.setContent(content);
                    }
                }
            };

            this.editorIntegration.addFlowControls();
        },

        // Setup dock integration
        setupDockIntegration: function() {
            this.dockIntegration = {
                // Add flow builder to dock
                addToDock: function() {
                    if (window.AlgorithmPressDock && typeof window.AlgorithmPressDock.addModule === 'function') {
                        const flowBuilderPanel = FlowBuilder.createFlowBuilderUI();
                        
                        window.AlgorithmPressDock.addModule({
                            id: 'flow-builder',
                            name: 'Flow Builder',
                            icon: 'fas fa-sitemap',
                            content: flowBuilderPanel,
                            position: 'right',
                            order: 4,
                            resizable: true,
                            collapsible: true
                        });
                    }
                },

                // Create flow execution panel
                createExecutionPanel: function() {
                    const panel = document.createElement('div');
                    panel.className = 'flow-execution-panel';
                    panel.innerHTML = `
                        <div class="execution-header">
                            <h4>Flow Execution</h4>
                            <div class="execution-controls">
                                <button class="btn btn-success btn-sm" id="execute-flow">
                                    <i class="fas fa-play"></i> Execute
                                </button>
                                <button class="btn btn-danger btn-sm" id="stop-flow">
                                    <i class="fas fa-stop"></i> Stop
                                </button>
                                <button class="btn btn-info btn-sm" id="debug-flow">
                                    <i class="fas fa-bug"></i> Debug
                                </button>
                            </div>
                        </div>
                        
                        <div class="execution-status">
                            <div class="status-indicator" id="execution-status">
                                <span class="status-dot stopped"></span>
                                <span class="status-text">Stopped</span>
                            </div>
                        </div>
                        
                        <div class="execution-variables">
                            <h5>Variables</h5>
                            <div class="variables-list" id="variables-list"></div>
                        </div>
                        
                        <div class="execution-output">
                            <h5>Output</h5>
                            <div class="output-console" id="output-console"></div>
                        </div>
                    `;
                    
                    return panel;
                }
            };

            this.dockIntegration.addToDock();
        },

        // Setup code generation system
        setupCodeGeneration: function() {
            this.codeGenerator = {
                // Generate code from flow
                generateFromFlow: async function(flow, options = {}) {
                    const language = options.language || 'php';
                    const framework = options.framework || 'vanilla';
                    
                    switch (language) {
                        case 'php':
                            return this.generatePHP(flow, options);
                        case 'javascript':
                            return this.generateJavaScript(flow, options);
                        case 'html':
                            return this.generateHTML(flow, options);
                        case 'css':
                            return this.generateCSS(flow, options);
                        default:
                            throw new Error(`Unsupported language: ${language}`);
                    }
                },

                // Generate PHP code
                generatePHP: function(flow, options) {
                    let code = `<?php
// Generated from flow: ${flow.name}
// Generated at: ${new Date().toISOString()}

`;

                    // Process nodes in execution order
                    const executionOrder = this.getExecutionOrder(flow);
                    
                    executionOrder.forEach(nodeId => {
                        const node = flow.nodes.get(nodeId);
                        code += this.generatePHPNodeCode(node, flow);
                    });

                    return code;
                },

                // Generate JavaScript code
                generateJavaScript: function(flow, options) {
                    let code = `// Generated from flow: ${flow.name}
// Generated at: ${new Date().toISOString()}

`;

                    if (options.framework === 'react') {
                        code += this.generateReactComponent(flow);
                    } else if (options.framework === 'vue') {
                        code += this.generateVueComponent(flow);
                    } else {
                        code += this.generateVanillaJS(flow);
                    }

                    return code;
                },

                // Generate HTML code
                generateHTML: function(flow, options) {
                    let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${flow.name}</title>
    <!-- Generated at: ${new Date().toISOString()} -->
</head>
<body>
`;

                    // Generate UI from flow nodes
                    html += this.generateHTMLFromUINodes(flow);

                    html += `
</body>
</html>`;

                    return html;
                },

                // Get execution order of nodes
                getExecutionOrder: function(flow) {
                    const visited = new Set();
                    const order = [];
                    
                    // Find start nodes
                    const startNodes = Array.from(flow.nodes.values())
                        .filter(node => node.type === 'start' || this.isStartNode(node));
                    
                    // Depth-first traversal
                    startNodes.forEach(startNode => {
                        this.dfsTraversal(startNode, flow, visited, order);
                    });
                    
                    return order;
                },

                dfsTraversal: function(node, flow, visited, order) {
                    if (visited.has(node.id)) return;
                    
                    visited.add(node.id);
                    order.push(node.id);
                    
                    // Find connected nodes
                    const connections = Array.from(flow.connections.values())
                        .filter(conn => conn.sourceNodeId === node.id);
                    
                    connections.forEach(connection => {
                        const targetNode = flow.nodes.get(connection.targetNodeId);
                        if (targetNode) {
                            this.dfsTraversal(targetNode, flow, visited, order);
                        }
                    });
                },

                generatePHPNodeCode: function(node, flow) {
                    switch (node.type) {
                        case 'http-request':
                            return this.generatePHPHttpRequest(node);
                        case 'condition':
                            return this.generatePHPCondition(node);
                        case 'database-query':
                            return this.generatePHPDatabaseQuery(node);
                        case 'send-email':
                            return this.generatePHPSendEmail(node);
                        default:
                            return `// Node: ${node.type} (${node.id})\n`;
                    }
                },

                generatePHPHttpRequest: function(node) {
                    return `
// HTTP Request: ${node.properties.title}
$curl = curl_init();
curl_setopt_array($curl, [
    CURLOPT_URL => "${node.properties.url}",
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_CUSTOMREQUEST => "${node.properties.method}",
    CURLOPT_TIMEOUT => ${node.properties.timeout / 1000},
]);

$response = curl_exec($curl);
$httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
curl_close($curl);

if ($httpCode >= 200 && $httpCode < 300) {
    // Success path
    $responseData = json_decode($response, true);
} else {
    // Error path
    throw new Exception("HTTP request failed: " . $httpCode);
}

`;
                }
            };
        },

        // Register flow templates
        registerFlowTemplates: function() {
            this.templates = new Map();

            // Register common flow templates
            this.templates.set('contact-form', {
                name: 'Contact Form',
                description: 'Complete contact form with email notification',
                category: 'forms',
                icon: 'fas fa-envelope',
                generateFlow: function() {
                    return FlowBuilder.Integration.createContactFormFlow();
                }
            });

            this.templates.set('api-integration', {
                name: 'API Integration',
                description: 'RESTful API integration with error handling',
                category: 'api',
                icon: 'fas fa-exchange-alt',
                generateFlow: function() {
                    return FlowBuilder.Integration.createAPIIntegrationFlow();
                }
            });

            this.templates.set('data-processor', {
                name: 'Data Processor',
                description: 'Transform and validate data',
                category: 'data',
                icon: 'fas fa-cogs',
                generateFlow: function() {
                    return FlowBuilder.Integration.createDataProcessorFlow();
                }
            });

            this.templates.set('user-registration', {
                name: 'User Registration',
                description: 'Complete user registration system',
                category: 'auth',
                icon: 'fas fa-user-plus',
                generateFlow: function() {
                    return FlowBuilder.Integration.createUserRegistrationFlow();
                }
            });
        },

        // Create contact form flow template
        createContactFormFlow: function() {
            const flow = FlowBuilder.createFlow('Contact Form Flow', {
                description: 'Handles contact form submissions with email notifications'
            });

            // Add nodes
            const startNode = FlowBuilder.addNode('start', { x: 100, y: 100 });
            const formNode = FlowBuilder.addNode('form-submit', { x: 300, y: 100 });
            const validateNode = FlowBuilder.addNode('condition', { x: 500, y: 100 });
            const emailNode = FlowBuilder.addNode('send-email', { x: 700, y: 100 });
            const successNode = FlowBuilder.addNode('display-text', { x: 900, y: 100 });
            const errorNode = FlowBuilder.addNode('display-text', { x: 500, y: 250 });

            // Configure nodes
            formNode.properties = {
                ...formNode.properties,
                title: 'Contact Form',
                formId: 'contact-form'
            };

            validateNode.properties = {
                ...validateNode.properties,
                title: 'Validate Email',
                leftValue: '$formData["email"]',
                operator: 'contains',
                rightValue: '@'
            };

            emailNode.properties = {
                ...emailNode.properties,
                title: 'Send Notification',
                to: 'admin@example.com',
                subject: 'New Contact Form Submission',
                body: 'New message from: $formData["name"] ($formData["email"])\n\nMessage: $formData["message"]'
            };

            return flow;
        },

        // Public methods
        openFlowBuilder: function() {
            const flowBuilderContainer = document.getElementById('flow-builder-container');
            if (flowBuilderContainer) {
                flowBuilderContainer.style.display = 'block';
                
                // If no active flow, create a new one
                if (!FlowBuilder.state.activeFlow) {
                    FlowBuilder.createFlow('New Flow');
                }
            }
        },

        showCodeGenerationDialog: function() {
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.innerHTML = `
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Generate Code from Flow</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Select Flow</label>
                                <select class="form-select" id="flow-select">
                                    ${this.generateFlowOptions()}
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Language</label>
                                <select class="form-select" id="language-select">
                                    <option value="php">PHP</option>
                                    <option value="javascript">JavaScript</option>
                                    <option value="html">HTML</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Framework</label>
                                <select class="form-select" id="framework-select">
                                    <option value="vanilla">Vanilla</option>
                                    <option value="react">React</option>
                                    <option value="vue">Vue.js</option>
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="FlowBuilder.Integration.performCodeGeneration()">Generate</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            if (window.bootstrap && window.bootstrap.Modal) {
                new window.bootstrap.Modal(modal).show();
            }
        },

        showFlowTemplates: function() {
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.innerHTML = `
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Flow Templates</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="template-grid">
                                ${this.generateTemplateCards()}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            if (window.bootstrap && window.bootstrap.Modal) {
                new window.bootstrap.Modal(modal).show();
            }
        },

        generateFlowOptions: function() {
            let options = '<option value="">Select a flow...</option>';
            FlowBuilder.state.flows.forEach((flow, flowId) => {
                options += `<option value="${flowId}">${flow.name}</option>`;
            });
            return options;
        },

        generateTemplateCards: function() {
            let cards = '';
            this.templates.forEach((template, templateId) => {
                cards += `
                    <div class="template-card" onclick="FlowBuilder.Integration.createFromTemplate('${templateId}')">
                        <div class="template-icon">
                            <i class="${template.icon}"></i>
                        </div>
                        <h6>${template.name}</h6>
                        <p>${template.description}</p>
                    </div>
                `;
            });
            return cards;
        },

        createFromTemplate: function(templateId) {
            const template = this.templates.get(templateId);
            if (template) {
                const flow = template.generateFlow();
                FlowBuilder.setActiveFlow(flow.id);
                this.openFlowBuilder();
            }
        },

        performCodeGeneration: async function() {
            const flowId = document.getElementById('flow-select').value;
            const language = document.getElementById('language-select').value;
            const framework = document.getElementById('framework-select').value;

            if (!flowId) {
                alert('Please select a flow');
                return;
            }

            try {
                const flow = FlowBuilder.state.flows.get(flowId);
                const code = await this.codeGenerator.generateFromFlow(flow, {
                    language: language,
                    framework: framework
                });

                // Inject into editor
                this.editorIntegration.injectCode(code, 'end');
                
                // Close modal
                const modal = document.querySelector('.modal.show');
                if (modal && window.bootstrap) {
                    window.bootstrap.Modal.getInstance(modal).hide();
                }
            } catch (error) {
                console.error('Code generation failed:', error);
                alert('Code generation failed: ' + error.message);
            }
        }
    };

    // Initialize integration when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            FlowBuilder.Integration.initialize();
        });
    } else {
        FlowBuilder.Integration.initialize();
    }

    console.log('AlgorithmPress Flow Builder Integration loaded');

})(window, document);